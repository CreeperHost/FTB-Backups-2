plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.shedaniel.unified-publishing"
}

def ENV = System.getenv()

architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowLib
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    shadowCommon.extendsFrom shadowLib
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
    implementation.extendsFrom shadowLib
    forgeRuntimeLibrary.extendsFrom shadowLib
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.minecraft_version}-${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"
    modApi("net.creeperhost:polylib-forge:${rootProject.polylib_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    forgeRuntimeLibrary("blue.endless:jankson:1.2.1") { transitive = false }
    forgeRuntimeLibrary("org.quartz-scheduler:quartz:2.0.2") { transitive = false }

    shadowLib ("blue.endless:jankson:1.2.1") { transitive = false }
    shadowLib ("org.quartz-scheduler:quartz:2.0.2") { transitive = false }
    shadowLib ("net.covers1624:Quack:0.4.6.69") { transitive = false }
    shadowLib ("net.creeperhost:LevelPreview:${rootProject.preview_version}") { transitive = false }
    shadowLib ("net.creeperhost:LevelIO:${rootProject.levelio_version}") { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowCommon]
    exclude "fabric.mod.json"
    exclude "architectury.common.json"
    archiveClassifier = "dev-shadow"

    dependencies {
        exclude(dependency("org.apache.logging::"))
        exclude(dependency("org.slf4j::"))
        exclude(dependency("javax.transaction::"))
    }

    def repackPackages = [
            'net/covers1624',
            'blue/endless',
            'de/piegames',
            'org/quartz'
    ]

    repackPackages.each {
        // Move all repack packages under ftbbackups namespace
        relocate it, "net/creeperhost/ftbbackups/repack/$it"
    }
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveBaseName.set "${rootProject.archives_base_name}-${project.name}-${rootProject.minecraft_version}"
    archiveClassifier = null
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archivesBaseName + "-forge"
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        if (ENV.CREEPERHOST_MAVEN_TOKEN) {
            maven {
                url "https://maven.creeperhost.net/release"
                credentials {
                    username = "githubci"
                    password = "${ENV.CREEPERHOST_MAVEN_TOKEN}"
                }
            }
        }
    }
}

unifiedPublishing {
    project {
        displayName = "${ENV.GITHUB_REF_NAME} [Forge]"
        releaseType = "$rootProject.artifact_type"
        changelog = ""
        gameVersions = [rootProject.minecraft_version]
        gameLoaders = ["forge"]
        mainPublication tasks.remapJar
        relations {
            depends {
                curseforge = "polylib"
            }
        }

        var CURSE_API_KEY = project.findProperty("CURSE_API_KEY") ?: System.getenv("CURSE_API_KEY")
        if (CURSE_API_KEY != null) {
            curseforge {
                token = CURSE_API_KEY
                id = rootProject.curseforge_id
                gameVersions.addAll rootProject.minecraft_version
            }
        }
    }
}

